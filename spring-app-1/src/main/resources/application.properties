# --START PROMETHEUS
# Expose Prometheus endpoint
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
# show all config properties, development only
management.endpoint.configprops.show-values=always 

# Enable all metrics
management.metrics.enable.all=true

# Enable JVM metrics
management.metrics.enable.jvm=true
# --END PROMETHEUS


spring.application.name=spring-app-1

# --START OPENTELEMETRY
# https://opentelemetry.io/docs/languages/java/configuration/
# https://opentelemetry.io/docs/zero-code/java/spring-boot-starter/out-of-the-box-instrumentation/

# send to otel collector via grpc, port 4317
otel.exporter.otlp.endpoint=http://my-opentelemetry-collector.monitoring.svc.cluster.local:4317
otel.exporter.otlp.protocol=grpc

otel.traces.sampler=parentbased_traceidratio
# development: 1.0, production: 0.1
otel.traces.sampler.arg=1.0

# kafka config: https://gist.github.com/geunho/77f3f9a112ea327457353aa407328771
# kafka broker address
spring.kafka.bootstrap-servers=my-kafka-broker.monitoring.svc.cluster.local:9092

# producer key serializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# producer value serializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# Enable idempotence to prevent duplicate messages during retries
spring.kafka.producer.properties.enable.idempotence=true
# acks: Required for idempotence
spring.kafka.producer.acks=all
# retries
spring.kafka.producer.retries=3
# max in flight requests per connection: Prevent message reordering during retries
spring.kafka.producer.max-in-flight-requests-per-connection=1
# transaction id prefix
spring.kafka.producer.transaction-id-prefix=tx-

# # Make Kafka failure non-fatal for application startup
spring.kafka.consumer.properties.allow.auto.create.topics=true

spring.data.redis.host=host.docker.internal
spring.data.redis.port=6379
spring.data.redis.username=
spring.data.redis.password=

cache.redis.key-prefix=${spring.application.name}
cache.redis.time-to-live=3600000
cache.redis.enable-statistics=true