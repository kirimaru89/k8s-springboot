version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: postgres_db
    environment:
      POSTGRES_PASSWORD: postgres
    ports:
      - "5435:5432"
    volumes:
      - postgres_data:/var/lib/postgres
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      retries: 5
      start_period: 10s

  fraud1:
    image: openjdk:21-jdk-slim
    container_name: fraud_service_1
    working_dir: /app
    volumes:
      - ./fraud-detection-service:/app
      - ~/.m2:/root/.m2
    command: [ "/bin/sh", "-c", "cd /app && ./mvnw clean spring-boot:run" ]
    depends_on:
      - postgres
      - kafka
    environment:
      SERVER_PORT: 8686
      SPRING_APPLICATION_NAME: fraud-service
      SPRING_APPLICATION_INSTANCE_ID: instance-1
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_SQL_INIT_MODE: always
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - app-network

  account1:
    image: openjdk:21-jdk-slim
    container_name: account_service_1
    working_dir: /app
    volumes:
      - ./account-service:/app
      - ~/.m2:/root/.m2
    ports:
      - "8585:8585"
    command: [ "/bin/sh", "-c", "cd /app && ./mvnw clean spring-boot:run" ]
    depends_on:
      - postgres
      - kafka
    environment:
      SERVER_PORT: 8585
      SPRING_APPLICATION_NAME: account-service
      SPRING_APPLICATION_INSTANCE_ID: instance-1
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_SQL_INIT_MODE: always
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - app-network

  transaction1:
    image: openjdk:21-jdk-slim
    container_name: transaction_service_1
    working_dir: /app
    volumes:
      - ./transaction-service:/app
      - ~/.m2:/root/.m2
    ports:
      - "8484:8484"
    command: [ "/bin/sh", "-c", "cd /app && ./mvnw clean spring-boot:run" ]
    depends_on:
      - postgres
      - kafka
    environment:
      SERVER_PORT: 8484
      SPRING_APPLICATION_NAME: transaction-service
      SPRING_APPLICATION_INSTANCE_ID: instance-1
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_SQL_INIT_MODE: always
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - app-network

  # Add ZooKeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Add Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Optional Kafka UI for management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    depends_on:
      - kafka
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - app-network

networks:
  app-network:
    name: app-network
    driver: bridge

volumes:
  postgres_data: