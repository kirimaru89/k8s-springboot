# --START PROMETHEUS
# Expose Prometheus endpoint
management.endpoints.web.exposure.include=health,info,prometheus
management.endpoint.health.show-details=always

# Enable all metrics
management.metrics.enable.all=true

# Enable JVM metrics
management.metrics.enable.jvm=true
# --END PROMETHEUS


# --START OPENTELEMETRY
# Service name - this is important for identifying your application in the telemetry data
spring.application.name=spring-app-2

# only apply if you use Spring Boot auto-instrumentation
# # OpenTelemetry exporter endpoint - point to your collector
# management.otlp.metrics.export.url=http://my-opentelemetry-collector.monitoring.svc.cluster.local:4318/v1/metrics
# management.otlp.tracing.endpoint=http://my-opentelemetry-collector.monitoring.svc.cluster.local:4318/v1/traces

# Tracing configuration
management.tracing.sampling.probability=1.0
management.tracing.enabled=true

# Enable OpenTelemetry metrics export
management.metrics.export.otlp.enabled=true
management.metrics.export.otlp.step=10s

# Additional helpful configurations
# More frequent metrics publishing (reduced from 60s to 10s)
management.metrics.export.defaults.step=10s

# Enable web metrics collection (request timing, etc)
management.metrics.web.server.request.autotime.enabled=true

# More detailed HTTP metrics
management.metrics.web.server.request.metric-name=http.server.requests

# --END OPENTELEMETRY

# must use jdbc:otel: prefix
# and use the driver-class-name for otel collector
spring.datasource.url=jdbc:otel:mysql://mysql:3306/book_db
spring.datasource.driver-class-name=io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver
spring.datasource.username=user
spring.datasource.password=password

# Ensure logs include trace IDs for correlation
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

spring.kafka.bootstrap-servers=my-kafka-broker.monitoring.svc.cluster.local:9092

# Kafka Producer Configuration
spring.kafka.producer.bootstrap-servers=my-kafka-broker.monitoring.svc.cluster.local:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# Kafka Consumer Configuration
spring.kafka.consumer.bootstrap-servers=my-kafka-broker.monitoring.svc.cluster.local:9092
spring.kafka.consumer.group-id=${spring.application.name}-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer



opentelemetry.exporter.otlp.endpoint=http://my-opentelemetry-collector.monitoring.svc.cluster.local:4317