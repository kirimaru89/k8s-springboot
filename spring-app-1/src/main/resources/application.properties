# --START PROMETHEUS
# Expose Prometheus endpoint
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# Enable all metrics
management.metrics.enable.all=true

# Enable JVM metrics
management.metrics.enable.jvm=true
# --END PROMETHEUS


spring.application.name=spring-app-1

# --START OPENTELEMETRY
# https://opentelemetry.io/docs/languages/java/configuration/
# https://opentelemetry.io/docs/zero-code/java/spring-boot-starter/out-of-the-box-instrumentation/

# send to otel collector via grpc, port 4317
otel.exporter.otlp.endpoint=http://my-opentelemetry-collector.monitoring.svc.cluster.local:4317
otel.exporter.otlp.protocol=grpc

otel.traces.sampler=parentbased_traceidratio
# development: 1.0, production: 0.1
otel.traces.sampler.arg=1.0

# --END OPENTELEMETRY

# must use jdbc:otel: prefix
# and use the driver-class-name for otel collector
spring.datasource.url=jdbc:mysql://mysql:3306/book_db?useSSL=false&serverTimezone=UTC
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=user
spring.datasource.password=password

# get username and password from vault
# spring.config.import=file:/vault/secrets/db-creds.txt
# spring.datasource.url=jdbc:otel:mysql://mysql:3306/book_db
# spring.datasource.driver-class-name=io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver


spring.kafka.bootstrap-servers=my-kafka-broker.monitoring.svc.cluster.local:9092

# Kafka Producer Configuration
spring.kafka.producer.bootstrap-servers=my-kafka-broker.monitoring.svc.cluster.local:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# Kafka Consumer Configuration
spring.kafka.consumer.bootstrap-servers=my-kafka-broker.monitoring.svc.cluster.local:9092
spring.kafka.consumer.group-id=${spring.application.name}-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

spring.data.redis.host=host.docker.internal
spring.data.redis.port=6379