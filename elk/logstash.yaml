# --- ConfigMap: Logstash config with parsing logic ---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
data:
  logstash.yml: |
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline

  logstash.conf: |
    input {
      beats {
        port => 5044
      }
    }

    filter {
      if [kubernetes][container][name] =~ "spring-app.*" {

        # First save the raw message
        mutate {
          copy => { "message" => "raw_message" }
          add_field => {
            "cluster_name" => "development"
            "env" => "development"
          }
        }

        # Parse log line with grok
        grok {
          match => {
            "message" => "^%{TIMESTAMP_ISO8601:timestamp} \[%{DATA:thread.name}\] %{LOGLEVEL:log.level}\s+%{JAVACLASS:logger.name} traceId=%{NOTSPACE:trace.id} spanId=%{NOTSPACE:trace.span_id} className:(?:%{NOTSPACE:class.name}|) function:(?:%{NOTSPACE:function.name}|) - %{GREEDYDATA:log_content}"
          }
          tag_on_failure => ["grok_failure"]
        }

        # Set @timestamp from Java log timestamp
        date {
          match => ["timestamp", "yyyy-MM-dd HH:mm:ss,SSS"]
          target => "@timestamp"
        }

        # Decode embedded JSON if present
        json {
          source => "log_content"
          target => "parsed_json"
        }

        # Normalize log level
        mutate {
          lowercase => [ "log.level" ]
        }

        # Keep only useful fields
        prune {
          whitelist_names => ["^@timestamp$", "^timestamp$", "^trace", "^class", "^function", 
                              "^log", "^logger", "^thread", "^kubernetes", "^cluster_name$", "^env$", "^parsed_json", "^raw_message$", "^message$", "^log_content$"]
        }
      }
    }

    output {
      elasticsearch {
        hosts => ["http://elasticsearch.default.svc.cluster.local:9200"]
        index => "spring-logs-%{+YYYY.MM.dd}"
        ilm_enabled => true
        ilm_rollover_alias => "spring-logs"
        ilm_pattern => "{now/d}-000001"
        ilm_policy => "spring-logs-policy"
      }

      stdout {
        codec => rubydebug
      }
    }

---
# --- Service: Exposes port 5044 for Beats input ---
apiVersion: v1
kind: Service
metadata:
  name: logstash
  labels:
    app: logstash
spec:
  ports:
    - port: 5044
      name: beats
      protocol: TCP
  selector:
    app: logstash

---
# --- Deployment: Runs Logstash with config volumes ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  labels:
    app: logstash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
        - name: logstash
          image: docker.elastic.co/logstash/logstash:8.12.1
          ports:
            - containerPort: 5044
              name: beats
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
          volumeMounts:
            - name: config-volume
              mountPath: /usr/share/logstash/config/logstash.yml
              subPath: logstash.yml
            - name: config-volume
              mountPath: /usr/share/logstash/pipeline/logstash.conf
              subPath: logstash.conf
      volumes:
        - name: config-volume
          configMap:
            name: logstash-config